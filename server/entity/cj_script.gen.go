// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package entity

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/cjungo/cjuncms/model"
)

func newCjScript(db *gorm.DB, opts ...gen.DOOption) cjScript {
	_cjScript := cjScript{}

	_cjScript.cjScriptDo.UseDB(db, opts...)
	_cjScript.cjScriptDo.UseModel(&model.CjScript{})

	tableName := _cjScript.cjScriptDo.TableName()
	_cjScript.ALL = field.NewAsterisk(tableName)
	_cjScript.ID = field.NewUint32(tableName, "id")
	_cjScript.PassID = field.NewUint32(tableName, "pass_id")
	_cjScript.ProjectID = field.NewUint32(tableName, "project_id")
	_cjScript.Title = field.NewString(tableName, "title")
	_cjScript.Content = field.NewString(tableName, "content")

	_cjScript.fillFieldMap()

	return _cjScript
}

// cjScript 脚本
type cjScript struct {
	cjScriptDo cjScriptDo

	ALL       field.Asterisk
	ID        field.Uint32 // ID
	PassID    field.Uint32 // 密钥ID
	ProjectID field.Uint32 // 项目ID
	Title     field.String // 标题
	Content   field.String // 内容

	fieldMap map[string]field.Expr
}

func (c cjScript) Table(newTableName string) *cjScript {
	c.cjScriptDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cjScript) As(alias string) *cjScript {
	c.cjScriptDo.DO = *(c.cjScriptDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cjScript) updateTableName(table string) *cjScript {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint32(table, "id")
	c.PassID = field.NewUint32(table, "pass_id")
	c.ProjectID = field.NewUint32(table, "project_id")
	c.Title = field.NewString(table, "title")
	c.Content = field.NewString(table, "content")

	c.fillFieldMap()

	return c
}

func (c *cjScript) WithContext(ctx context.Context) *cjScriptDo { return c.cjScriptDo.WithContext(ctx) }

func (c cjScript) TableName() string { return c.cjScriptDo.TableName() }

func (c cjScript) Alias() string { return c.cjScriptDo.Alias() }

func (c cjScript) Columns(cols ...field.Expr) gen.Columns { return c.cjScriptDo.Columns(cols...) }

func (c *cjScript) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cjScript) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 5)
	c.fieldMap["id"] = c.ID
	c.fieldMap["pass_id"] = c.PassID
	c.fieldMap["project_id"] = c.ProjectID
	c.fieldMap["title"] = c.Title
	c.fieldMap["content"] = c.Content
}

func (c cjScript) clone(db *gorm.DB) cjScript {
	c.cjScriptDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cjScript) replaceDB(db *gorm.DB) cjScript {
	c.cjScriptDo.ReplaceDB(db)
	return c
}

type cjScriptDo struct{ gen.DO }

func (c cjScriptDo) Debug() *cjScriptDo {
	return c.withDO(c.DO.Debug())
}

func (c cjScriptDo) WithContext(ctx context.Context) *cjScriptDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cjScriptDo) ReadDB() *cjScriptDo {
	return c.Clauses(dbresolver.Read)
}

func (c cjScriptDo) WriteDB() *cjScriptDo {
	return c.Clauses(dbresolver.Write)
}

func (c cjScriptDo) Session(config *gorm.Session) *cjScriptDo {
	return c.withDO(c.DO.Session(config))
}

func (c cjScriptDo) Clauses(conds ...clause.Expression) *cjScriptDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cjScriptDo) Returning(value interface{}, columns ...string) *cjScriptDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cjScriptDo) Not(conds ...gen.Condition) *cjScriptDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cjScriptDo) Or(conds ...gen.Condition) *cjScriptDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cjScriptDo) Select(conds ...field.Expr) *cjScriptDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cjScriptDo) Where(conds ...gen.Condition) *cjScriptDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cjScriptDo) Order(conds ...field.Expr) *cjScriptDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cjScriptDo) Distinct(cols ...field.Expr) *cjScriptDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cjScriptDo) Omit(cols ...field.Expr) *cjScriptDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cjScriptDo) Join(table schema.Tabler, on ...field.Expr) *cjScriptDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cjScriptDo) LeftJoin(table schema.Tabler, on ...field.Expr) *cjScriptDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cjScriptDo) RightJoin(table schema.Tabler, on ...field.Expr) *cjScriptDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cjScriptDo) Group(cols ...field.Expr) *cjScriptDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cjScriptDo) Having(conds ...gen.Condition) *cjScriptDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cjScriptDo) Limit(limit int) *cjScriptDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cjScriptDo) Offset(offset int) *cjScriptDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cjScriptDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *cjScriptDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cjScriptDo) Unscoped() *cjScriptDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cjScriptDo) Create(values ...*model.CjScript) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cjScriptDo) CreateInBatches(values []*model.CjScript, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cjScriptDo) Save(values ...*model.CjScript) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cjScriptDo) First() (*model.CjScript, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CjScript), nil
	}
}

func (c cjScriptDo) Take() (*model.CjScript, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CjScript), nil
	}
}

func (c cjScriptDo) Last() (*model.CjScript, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CjScript), nil
	}
}

func (c cjScriptDo) Find() ([]*model.CjScript, error) {
	result, err := c.DO.Find()
	return result.([]*model.CjScript), err
}

func (c cjScriptDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CjScript, err error) {
	buf := make([]*model.CjScript, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cjScriptDo) FindInBatches(result *[]*model.CjScript, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cjScriptDo) Attrs(attrs ...field.AssignExpr) *cjScriptDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cjScriptDo) Assign(attrs ...field.AssignExpr) *cjScriptDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cjScriptDo) Joins(fields ...field.RelationField) *cjScriptDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cjScriptDo) Preload(fields ...field.RelationField) *cjScriptDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cjScriptDo) FirstOrInit() (*model.CjScript, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CjScript), nil
	}
}

func (c cjScriptDo) FirstOrCreate() (*model.CjScript, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CjScript), nil
	}
}

func (c cjScriptDo) FindByPage(offset int, limit int) (result []*model.CjScript, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cjScriptDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cjScriptDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cjScriptDo) Delete(models ...*model.CjScript) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cjScriptDo) withDO(do gen.Dao) *cjScriptDo {
	c.DO = *do.(*gen.DO)
	return c
}
