// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package entity

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/cjungo/cjuncms/model"
)

func newCjMachineCPUTime(db *gorm.DB, opts ...gen.DOOption) cjMachineCPUTime {
	_cjMachineCPUTime := cjMachineCPUTime{}

	_cjMachineCPUTime.cjMachineCPUTimeDo.UseDB(db, opts...)
	_cjMachineCPUTime.cjMachineCPUTimeDo.UseModel(&model.CjMachineCPUTime{})

	tableName := _cjMachineCPUTime.cjMachineCPUTimeDo.TableName()
	_cjMachineCPUTime.ALL = field.NewAsterisk(tableName)
	_cjMachineCPUTime.ID = field.NewUint32(tableName, "id")
	_cjMachineCPUTime.CPU = field.NewString(tableName, "cpu")
	_cjMachineCPUTime.User = field.NewFloat64(tableName, "user")
	_cjMachineCPUTime.System = field.NewFloat64(tableName, "system")
	_cjMachineCPUTime.Idle = field.NewFloat64(tableName, "idle")
	_cjMachineCPUTime.Nice = field.NewFloat64(tableName, "nice")
	_cjMachineCPUTime.Iowait = field.NewFloat64(tableName, "iowait")
	_cjMachineCPUTime.Irq = field.NewFloat64(tableName, "irq")
	_cjMachineCPUTime.Softirq = field.NewFloat64(tableName, "softirq")
	_cjMachineCPUTime.Steal = field.NewFloat64(tableName, "steal")
	_cjMachineCPUTime.Guest = field.NewFloat64(tableName, "guest")
	_cjMachineCPUTime.GuestNice = field.NewFloat64(tableName, "guest_nice")
	_cjMachineCPUTime.CreateAt = field.NewTime(tableName, "create_at")

	_cjMachineCPUTime.fillFieldMap()

	return _cjMachineCPUTime
}

// cjMachineCPUTime CPU 状态
type cjMachineCPUTime struct {
	cjMachineCPUTimeDo cjMachineCPUTimeDo

	ALL       field.Asterisk
	ID        field.Uint32
	CPU       field.String
	User      field.Float64 // 用户时间
	System    field.Float64 // 系统时间
	Idle      field.Float64 // 空闲时间
	Nice      field.Float64
	Iowait    field.Float64 // IO等待
	Irq       field.Float64 // 硬中断
	Softirq   field.Float64 // 软中断
	Steal     field.Float64
	Guest     field.Float64
	GuestNice field.Float64
	CreateAt  field.Time // 记录时间

	fieldMap map[string]field.Expr
}

func (c cjMachineCPUTime) Table(newTableName string) *cjMachineCPUTime {
	c.cjMachineCPUTimeDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cjMachineCPUTime) As(alias string) *cjMachineCPUTime {
	c.cjMachineCPUTimeDo.DO = *(c.cjMachineCPUTimeDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cjMachineCPUTime) updateTableName(table string) *cjMachineCPUTime {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint32(table, "id")
	c.CPU = field.NewString(table, "cpu")
	c.User = field.NewFloat64(table, "user")
	c.System = field.NewFloat64(table, "system")
	c.Idle = field.NewFloat64(table, "idle")
	c.Nice = field.NewFloat64(table, "nice")
	c.Iowait = field.NewFloat64(table, "iowait")
	c.Irq = field.NewFloat64(table, "irq")
	c.Softirq = field.NewFloat64(table, "softirq")
	c.Steal = field.NewFloat64(table, "steal")
	c.Guest = field.NewFloat64(table, "guest")
	c.GuestNice = field.NewFloat64(table, "guest_nice")
	c.CreateAt = field.NewTime(table, "create_at")

	c.fillFieldMap()

	return c
}

func (c *cjMachineCPUTime) WithContext(ctx context.Context) *cjMachineCPUTimeDo {
	return c.cjMachineCPUTimeDo.WithContext(ctx)
}

func (c cjMachineCPUTime) TableName() string { return c.cjMachineCPUTimeDo.TableName() }

func (c cjMachineCPUTime) Alias() string { return c.cjMachineCPUTimeDo.Alias() }

func (c cjMachineCPUTime) Columns(cols ...field.Expr) gen.Columns {
	return c.cjMachineCPUTimeDo.Columns(cols...)
}

func (c *cjMachineCPUTime) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cjMachineCPUTime) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 13)
	c.fieldMap["id"] = c.ID
	c.fieldMap["cpu"] = c.CPU
	c.fieldMap["user"] = c.User
	c.fieldMap["system"] = c.System
	c.fieldMap["idle"] = c.Idle
	c.fieldMap["nice"] = c.Nice
	c.fieldMap["iowait"] = c.Iowait
	c.fieldMap["irq"] = c.Irq
	c.fieldMap["softirq"] = c.Softirq
	c.fieldMap["steal"] = c.Steal
	c.fieldMap["guest"] = c.Guest
	c.fieldMap["guest_nice"] = c.GuestNice
	c.fieldMap["create_at"] = c.CreateAt
}

func (c cjMachineCPUTime) clone(db *gorm.DB) cjMachineCPUTime {
	c.cjMachineCPUTimeDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cjMachineCPUTime) replaceDB(db *gorm.DB) cjMachineCPUTime {
	c.cjMachineCPUTimeDo.ReplaceDB(db)
	return c
}

type cjMachineCPUTimeDo struct{ gen.DO }

func (c cjMachineCPUTimeDo) Debug() *cjMachineCPUTimeDo {
	return c.withDO(c.DO.Debug())
}

func (c cjMachineCPUTimeDo) WithContext(ctx context.Context) *cjMachineCPUTimeDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cjMachineCPUTimeDo) ReadDB() *cjMachineCPUTimeDo {
	return c.Clauses(dbresolver.Read)
}

func (c cjMachineCPUTimeDo) WriteDB() *cjMachineCPUTimeDo {
	return c.Clauses(dbresolver.Write)
}

func (c cjMachineCPUTimeDo) Session(config *gorm.Session) *cjMachineCPUTimeDo {
	return c.withDO(c.DO.Session(config))
}

func (c cjMachineCPUTimeDo) Clauses(conds ...clause.Expression) *cjMachineCPUTimeDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cjMachineCPUTimeDo) Returning(value interface{}, columns ...string) *cjMachineCPUTimeDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cjMachineCPUTimeDo) Not(conds ...gen.Condition) *cjMachineCPUTimeDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cjMachineCPUTimeDo) Or(conds ...gen.Condition) *cjMachineCPUTimeDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cjMachineCPUTimeDo) Select(conds ...field.Expr) *cjMachineCPUTimeDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cjMachineCPUTimeDo) Where(conds ...gen.Condition) *cjMachineCPUTimeDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cjMachineCPUTimeDo) Order(conds ...field.Expr) *cjMachineCPUTimeDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cjMachineCPUTimeDo) Distinct(cols ...field.Expr) *cjMachineCPUTimeDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cjMachineCPUTimeDo) Omit(cols ...field.Expr) *cjMachineCPUTimeDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cjMachineCPUTimeDo) Join(table schema.Tabler, on ...field.Expr) *cjMachineCPUTimeDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cjMachineCPUTimeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *cjMachineCPUTimeDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cjMachineCPUTimeDo) RightJoin(table schema.Tabler, on ...field.Expr) *cjMachineCPUTimeDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cjMachineCPUTimeDo) Group(cols ...field.Expr) *cjMachineCPUTimeDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cjMachineCPUTimeDo) Having(conds ...gen.Condition) *cjMachineCPUTimeDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cjMachineCPUTimeDo) Limit(limit int) *cjMachineCPUTimeDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cjMachineCPUTimeDo) Offset(offset int) *cjMachineCPUTimeDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cjMachineCPUTimeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *cjMachineCPUTimeDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cjMachineCPUTimeDo) Unscoped() *cjMachineCPUTimeDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cjMachineCPUTimeDo) Create(values ...*model.CjMachineCPUTime) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cjMachineCPUTimeDo) CreateInBatches(values []*model.CjMachineCPUTime, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cjMachineCPUTimeDo) Save(values ...*model.CjMachineCPUTime) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cjMachineCPUTimeDo) First() (*model.CjMachineCPUTime, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CjMachineCPUTime), nil
	}
}

func (c cjMachineCPUTimeDo) Take() (*model.CjMachineCPUTime, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CjMachineCPUTime), nil
	}
}

func (c cjMachineCPUTimeDo) Last() (*model.CjMachineCPUTime, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CjMachineCPUTime), nil
	}
}

func (c cjMachineCPUTimeDo) Find() ([]*model.CjMachineCPUTime, error) {
	result, err := c.DO.Find()
	return result.([]*model.CjMachineCPUTime), err
}

func (c cjMachineCPUTimeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CjMachineCPUTime, err error) {
	buf := make([]*model.CjMachineCPUTime, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cjMachineCPUTimeDo) FindInBatches(result *[]*model.CjMachineCPUTime, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cjMachineCPUTimeDo) Attrs(attrs ...field.AssignExpr) *cjMachineCPUTimeDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cjMachineCPUTimeDo) Assign(attrs ...field.AssignExpr) *cjMachineCPUTimeDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cjMachineCPUTimeDo) Joins(fields ...field.RelationField) *cjMachineCPUTimeDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cjMachineCPUTimeDo) Preload(fields ...field.RelationField) *cjMachineCPUTimeDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cjMachineCPUTimeDo) FirstOrInit() (*model.CjMachineCPUTime, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CjMachineCPUTime), nil
	}
}

func (c cjMachineCPUTimeDo) FirstOrCreate() (*model.CjMachineCPUTime, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CjMachineCPUTime), nil
	}
}

func (c cjMachineCPUTimeDo) FindByPage(offset int, limit int) (result []*model.CjMachineCPUTime, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cjMachineCPUTimeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cjMachineCPUTimeDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cjMachineCPUTimeDo) Delete(models ...*model.CjMachineCPUTime) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cjMachineCPUTimeDo) withDO(do gen.Dao) *cjMachineCPUTimeDo {
	c.DO = *do.(*gen.DO)
	return c
}
