// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package entity

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/cjungo/cjuncms/model"
)

func newCjMachineDiskUsage(db *gorm.DB, opts ...gen.DOOption) cjMachineDiskUsage {
	_cjMachineDiskUsage := cjMachineDiskUsage{}

	_cjMachineDiskUsage.cjMachineDiskUsageDo.UseDB(db, opts...)
	_cjMachineDiskUsage.cjMachineDiskUsageDo.UseModel(&model.CjMachineDiskUsage{})

	tableName := _cjMachineDiskUsage.cjMachineDiskUsageDo.TableName()
	_cjMachineDiskUsage.ALL = field.NewAsterisk(tableName)
	_cjMachineDiskUsage.ID = field.NewUint32(tableName, "id")
	_cjMachineDiskUsage.Path = field.NewString(tableName, "path")
	_cjMachineDiskUsage.Fstype = field.NewString(tableName, "fstype")
	_cjMachineDiskUsage.Total = field.NewUint64(tableName, "total")
	_cjMachineDiskUsage.Free = field.NewUint64(tableName, "free")
	_cjMachineDiskUsage.Used = field.NewUint64(tableName, "used")
	_cjMachineDiskUsage.UsedPercent = field.NewFloat64(tableName, "used_percent")
	_cjMachineDiskUsage.InodesTotal = field.NewUint64(tableName, "inodes_total")
	_cjMachineDiskUsage.InodesUsed = field.NewUint64(tableName, "inodes_used")
	_cjMachineDiskUsage.InodesFree = field.NewUint64(tableName, "inodes_free")
	_cjMachineDiskUsage.InodesUsedPercent = field.NewFloat64(tableName, "inodes_used_percent")
	_cjMachineDiskUsage.CreateAt = field.NewTime(tableName, "create_at")

	_cjMachineDiskUsage.fillFieldMap()

	return _cjMachineDiskUsage
}

// cjMachineDiskUsage 硬盘使用
type cjMachineDiskUsage struct {
	cjMachineDiskUsageDo cjMachineDiskUsageDo

	ALL               field.Asterisk
	ID                field.Uint32
	Path              field.String
	Fstype            field.String
	Total             field.Uint64
	Free              field.Uint64
	Used              field.Uint64
	UsedPercent       field.Float64
	InodesTotal       field.Uint64
	InodesUsed        field.Uint64
	InodesFree        field.Uint64
	InodesUsedPercent field.Float64
	CreateAt          field.Time // 记录时间

	fieldMap map[string]field.Expr
}

func (c cjMachineDiskUsage) Table(newTableName string) *cjMachineDiskUsage {
	c.cjMachineDiskUsageDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cjMachineDiskUsage) As(alias string) *cjMachineDiskUsage {
	c.cjMachineDiskUsageDo.DO = *(c.cjMachineDiskUsageDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cjMachineDiskUsage) updateTableName(table string) *cjMachineDiskUsage {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint32(table, "id")
	c.Path = field.NewString(table, "path")
	c.Fstype = field.NewString(table, "fstype")
	c.Total = field.NewUint64(table, "total")
	c.Free = field.NewUint64(table, "free")
	c.Used = field.NewUint64(table, "used")
	c.UsedPercent = field.NewFloat64(table, "used_percent")
	c.InodesTotal = field.NewUint64(table, "inodes_total")
	c.InodesUsed = field.NewUint64(table, "inodes_used")
	c.InodesFree = field.NewUint64(table, "inodes_free")
	c.InodesUsedPercent = field.NewFloat64(table, "inodes_used_percent")
	c.CreateAt = field.NewTime(table, "create_at")

	c.fillFieldMap()

	return c
}

func (c *cjMachineDiskUsage) WithContext(ctx context.Context) *cjMachineDiskUsageDo {
	return c.cjMachineDiskUsageDo.WithContext(ctx)
}

func (c cjMachineDiskUsage) TableName() string { return c.cjMachineDiskUsageDo.TableName() }

func (c cjMachineDiskUsage) Alias() string { return c.cjMachineDiskUsageDo.Alias() }

func (c cjMachineDiskUsage) Columns(cols ...field.Expr) gen.Columns {
	return c.cjMachineDiskUsageDo.Columns(cols...)
}

func (c *cjMachineDiskUsage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cjMachineDiskUsage) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 12)
	c.fieldMap["id"] = c.ID
	c.fieldMap["path"] = c.Path
	c.fieldMap["fstype"] = c.Fstype
	c.fieldMap["total"] = c.Total
	c.fieldMap["free"] = c.Free
	c.fieldMap["used"] = c.Used
	c.fieldMap["used_percent"] = c.UsedPercent
	c.fieldMap["inodes_total"] = c.InodesTotal
	c.fieldMap["inodes_used"] = c.InodesUsed
	c.fieldMap["inodes_free"] = c.InodesFree
	c.fieldMap["inodes_used_percent"] = c.InodesUsedPercent
	c.fieldMap["create_at"] = c.CreateAt
}

func (c cjMachineDiskUsage) clone(db *gorm.DB) cjMachineDiskUsage {
	c.cjMachineDiskUsageDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cjMachineDiskUsage) replaceDB(db *gorm.DB) cjMachineDiskUsage {
	c.cjMachineDiskUsageDo.ReplaceDB(db)
	return c
}

type cjMachineDiskUsageDo struct{ gen.DO }

func (c cjMachineDiskUsageDo) Debug() *cjMachineDiskUsageDo {
	return c.withDO(c.DO.Debug())
}

func (c cjMachineDiskUsageDo) WithContext(ctx context.Context) *cjMachineDiskUsageDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cjMachineDiskUsageDo) ReadDB() *cjMachineDiskUsageDo {
	return c.Clauses(dbresolver.Read)
}

func (c cjMachineDiskUsageDo) WriteDB() *cjMachineDiskUsageDo {
	return c.Clauses(dbresolver.Write)
}

func (c cjMachineDiskUsageDo) Session(config *gorm.Session) *cjMachineDiskUsageDo {
	return c.withDO(c.DO.Session(config))
}

func (c cjMachineDiskUsageDo) Clauses(conds ...clause.Expression) *cjMachineDiskUsageDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cjMachineDiskUsageDo) Returning(value interface{}, columns ...string) *cjMachineDiskUsageDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cjMachineDiskUsageDo) Not(conds ...gen.Condition) *cjMachineDiskUsageDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cjMachineDiskUsageDo) Or(conds ...gen.Condition) *cjMachineDiskUsageDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cjMachineDiskUsageDo) Select(conds ...field.Expr) *cjMachineDiskUsageDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cjMachineDiskUsageDo) Where(conds ...gen.Condition) *cjMachineDiskUsageDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cjMachineDiskUsageDo) Order(conds ...field.Expr) *cjMachineDiskUsageDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cjMachineDiskUsageDo) Distinct(cols ...field.Expr) *cjMachineDiskUsageDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cjMachineDiskUsageDo) Omit(cols ...field.Expr) *cjMachineDiskUsageDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cjMachineDiskUsageDo) Join(table schema.Tabler, on ...field.Expr) *cjMachineDiskUsageDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cjMachineDiskUsageDo) LeftJoin(table schema.Tabler, on ...field.Expr) *cjMachineDiskUsageDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cjMachineDiskUsageDo) RightJoin(table schema.Tabler, on ...field.Expr) *cjMachineDiskUsageDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cjMachineDiskUsageDo) Group(cols ...field.Expr) *cjMachineDiskUsageDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cjMachineDiskUsageDo) Having(conds ...gen.Condition) *cjMachineDiskUsageDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cjMachineDiskUsageDo) Limit(limit int) *cjMachineDiskUsageDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cjMachineDiskUsageDo) Offset(offset int) *cjMachineDiskUsageDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cjMachineDiskUsageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *cjMachineDiskUsageDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cjMachineDiskUsageDo) Unscoped() *cjMachineDiskUsageDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cjMachineDiskUsageDo) Create(values ...*model.CjMachineDiskUsage) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cjMachineDiskUsageDo) CreateInBatches(values []*model.CjMachineDiskUsage, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cjMachineDiskUsageDo) Save(values ...*model.CjMachineDiskUsage) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cjMachineDiskUsageDo) First() (*model.CjMachineDiskUsage, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CjMachineDiskUsage), nil
	}
}

func (c cjMachineDiskUsageDo) Take() (*model.CjMachineDiskUsage, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CjMachineDiskUsage), nil
	}
}

func (c cjMachineDiskUsageDo) Last() (*model.CjMachineDiskUsage, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CjMachineDiskUsage), nil
	}
}

func (c cjMachineDiskUsageDo) Find() ([]*model.CjMachineDiskUsage, error) {
	result, err := c.DO.Find()
	return result.([]*model.CjMachineDiskUsage), err
}

func (c cjMachineDiskUsageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CjMachineDiskUsage, err error) {
	buf := make([]*model.CjMachineDiskUsage, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cjMachineDiskUsageDo) FindInBatches(result *[]*model.CjMachineDiskUsage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cjMachineDiskUsageDo) Attrs(attrs ...field.AssignExpr) *cjMachineDiskUsageDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cjMachineDiskUsageDo) Assign(attrs ...field.AssignExpr) *cjMachineDiskUsageDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cjMachineDiskUsageDo) Joins(fields ...field.RelationField) *cjMachineDiskUsageDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cjMachineDiskUsageDo) Preload(fields ...field.RelationField) *cjMachineDiskUsageDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cjMachineDiskUsageDo) FirstOrInit() (*model.CjMachineDiskUsage, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CjMachineDiskUsage), nil
	}
}

func (c cjMachineDiskUsageDo) FirstOrCreate() (*model.CjMachineDiskUsage, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CjMachineDiskUsage), nil
	}
}

func (c cjMachineDiskUsageDo) FindByPage(offset int, limit int) (result []*model.CjMachineDiskUsage, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cjMachineDiskUsageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cjMachineDiskUsageDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cjMachineDiskUsageDo) Delete(models ...*model.CjMachineDiskUsage) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cjMachineDiskUsageDo) withDO(do gen.Dao) *cjMachineDiskUsageDo {
	c.DO = *do.(*gen.DO)
	return c
}
