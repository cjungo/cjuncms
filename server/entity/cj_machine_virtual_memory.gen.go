// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package entity

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/cjungo/cjuncms/model"
)

func newCjMachineVirtualMemory(db *gorm.DB, opts ...gen.DOOption) cjMachineVirtualMemory {
	_cjMachineVirtualMemory := cjMachineVirtualMemory{}

	_cjMachineVirtualMemory.cjMachineVirtualMemoryDo.UseDB(db, opts...)
	_cjMachineVirtualMemory.cjMachineVirtualMemoryDo.UseModel(&model.CjMachineVirtualMemory{})

	tableName := _cjMachineVirtualMemory.cjMachineVirtualMemoryDo.TableName()
	_cjMachineVirtualMemory.ALL = field.NewAsterisk(tableName)
	_cjMachineVirtualMemory.ID = field.NewUint32(tableName, "id")
	_cjMachineVirtualMemory.Total = field.NewUint64(tableName, "total")
	_cjMachineVirtualMemory.Available = field.NewUint64(tableName, "available")
	_cjMachineVirtualMemory.Used = field.NewUint64(tableName, "used")
	_cjMachineVirtualMemory.UsedPercent = field.NewFloat64(tableName, "used_percent")
	_cjMachineVirtualMemory.Free = field.NewUint64(tableName, "free")
	_cjMachineVirtualMemory.Active = field.NewUint64(tableName, "active")
	_cjMachineVirtualMemory.Inactive = field.NewUint64(tableName, "inactive")
	_cjMachineVirtualMemory.Wired = field.NewUint64(tableName, "wired")
	_cjMachineVirtualMemory.Laundry = field.NewUint64(tableName, "laundry")
	_cjMachineVirtualMemory.Buffers = field.NewUint64(tableName, "buffers")
	_cjMachineVirtualMemory.Cached = field.NewUint64(tableName, "cached")
	_cjMachineVirtualMemory.WriteBack = field.NewUint64(tableName, "write_back")
	_cjMachineVirtualMemory.Dirty = field.NewUint64(tableName, "dirty")
	_cjMachineVirtualMemory.WriteBackTmp = field.NewUint64(tableName, "write_back_tmp")
	_cjMachineVirtualMemory.Shared = field.NewUint64(tableName, "shared")
	_cjMachineVirtualMemory.Slab = field.NewUint64(tableName, "slab")
	_cjMachineVirtualMemory.Sreclaimable = field.NewUint64(tableName, "sreclaimable")
	_cjMachineVirtualMemory.Sunreclaim = field.NewUint64(tableName, "sunreclaim")
	_cjMachineVirtualMemory.PageTables = field.NewUint64(tableName, "page_tables")
	_cjMachineVirtualMemory.SwapCached = field.NewUint64(tableName, "swap_cached")
	_cjMachineVirtualMemory.CommitLimit = field.NewUint64(tableName, "commit_limit")
	_cjMachineVirtualMemory.CommittedAs = field.NewUint64(tableName, "committed_as")
	_cjMachineVirtualMemory.HighTotal = field.NewUint64(tableName, "high_total")
	_cjMachineVirtualMemory.HighFree = field.NewUint64(tableName, "high_free")
	_cjMachineVirtualMemory.LowTotal = field.NewUint64(tableName, "low_total")
	_cjMachineVirtualMemory.LowFree = field.NewUint64(tableName, "low_free")
	_cjMachineVirtualMemory.SwapTotal = field.NewUint64(tableName, "swap_total")
	_cjMachineVirtualMemory.SwapFree = field.NewUint64(tableName, "swap_free")
	_cjMachineVirtualMemory.Mapped = field.NewUint64(tableName, "mapped")
	_cjMachineVirtualMemory.VmallocTotal = field.NewUint64(tableName, "vmalloc_total")
	_cjMachineVirtualMemory.VmallocUsed = field.NewUint64(tableName, "vmalloc_used")
	_cjMachineVirtualMemory.VmallocChunk = field.NewUint64(tableName, "vmalloc_chunk")
	_cjMachineVirtualMemory.HugePagesTotal = field.NewUint64(tableName, "huge_pages_total")
	_cjMachineVirtualMemory.HugePagesFree = field.NewUint64(tableName, "huge_pages_free")
	_cjMachineVirtualMemory.HugePagesRsvd = field.NewUint64(tableName, "huge_pages_rsvd")
	_cjMachineVirtualMemory.HugePagesSurp = field.NewUint64(tableName, "huge_pages_surp")
	_cjMachineVirtualMemory.HugePageSize = field.NewUint64(tableName, "huge_page_size")
	_cjMachineVirtualMemory.AnonHugePages = field.NewUint64(tableName, "anon_huge_pages")
	_cjMachineVirtualMemory.CreateAt = field.NewTime(tableName, "create_at")

	_cjMachineVirtualMemory.fillFieldMap()

	return _cjMachineVirtualMemory
}

// cjMachineVirtualMemory 内存
type cjMachineVirtualMemory struct {
	cjMachineVirtualMemoryDo cjMachineVirtualMemoryDo

	ALL            field.Asterisk
	ID             field.Uint32
	Total          field.Uint64 // 全部
	Available      field.Uint64
	Used           field.Uint64 // 已用
	UsedPercent    field.Float64
	Free           field.Uint64 // 空闲
	Active         field.Uint64
	Inactive       field.Uint64
	Wired          field.Uint64
	Laundry        field.Uint64
	Buffers        field.Uint64
	Cached         field.Uint64
	WriteBack      field.Uint64
	Dirty          field.Uint64
	WriteBackTmp   field.Uint64
	Shared         field.Uint64
	Slab           field.Uint64
	Sreclaimable   field.Uint64
	Sunreclaim     field.Uint64
	PageTables     field.Uint64
	SwapCached     field.Uint64
	CommitLimit    field.Uint64
	CommittedAs    field.Uint64
	HighTotal      field.Uint64
	HighFree       field.Uint64
	LowTotal       field.Uint64
	LowFree        field.Uint64
	SwapTotal      field.Uint64
	SwapFree       field.Uint64
	Mapped         field.Uint64
	VmallocTotal   field.Uint64
	VmallocUsed    field.Uint64
	VmallocChunk   field.Uint64
	HugePagesTotal field.Uint64
	HugePagesFree  field.Uint64
	HugePagesRsvd  field.Uint64
	HugePagesSurp  field.Uint64
	HugePageSize   field.Uint64
	AnonHugePages  field.Uint64
	CreateAt       field.Time // 记录时间

	fieldMap map[string]field.Expr
}

func (c cjMachineVirtualMemory) Table(newTableName string) *cjMachineVirtualMemory {
	c.cjMachineVirtualMemoryDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cjMachineVirtualMemory) As(alias string) *cjMachineVirtualMemory {
	c.cjMachineVirtualMemoryDo.DO = *(c.cjMachineVirtualMemoryDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cjMachineVirtualMemory) updateTableName(table string) *cjMachineVirtualMemory {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint32(table, "id")
	c.Total = field.NewUint64(table, "total")
	c.Available = field.NewUint64(table, "available")
	c.Used = field.NewUint64(table, "used")
	c.UsedPercent = field.NewFloat64(table, "used_percent")
	c.Free = field.NewUint64(table, "free")
	c.Active = field.NewUint64(table, "active")
	c.Inactive = field.NewUint64(table, "inactive")
	c.Wired = field.NewUint64(table, "wired")
	c.Laundry = field.NewUint64(table, "laundry")
	c.Buffers = field.NewUint64(table, "buffers")
	c.Cached = field.NewUint64(table, "cached")
	c.WriteBack = field.NewUint64(table, "write_back")
	c.Dirty = field.NewUint64(table, "dirty")
	c.WriteBackTmp = field.NewUint64(table, "write_back_tmp")
	c.Shared = field.NewUint64(table, "shared")
	c.Slab = field.NewUint64(table, "slab")
	c.Sreclaimable = field.NewUint64(table, "sreclaimable")
	c.Sunreclaim = field.NewUint64(table, "sunreclaim")
	c.PageTables = field.NewUint64(table, "page_tables")
	c.SwapCached = field.NewUint64(table, "swap_cached")
	c.CommitLimit = field.NewUint64(table, "commit_limit")
	c.CommittedAs = field.NewUint64(table, "committed_as")
	c.HighTotal = field.NewUint64(table, "high_total")
	c.HighFree = field.NewUint64(table, "high_free")
	c.LowTotal = field.NewUint64(table, "low_total")
	c.LowFree = field.NewUint64(table, "low_free")
	c.SwapTotal = field.NewUint64(table, "swap_total")
	c.SwapFree = field.NewUint64(table, "swap_free")
	c.Mapped = field.NewUint64(table, "mapped")
	c.VmallocTotal = field.NewUint64(table, "vmalloc_total")
	c.VmallocUsed = field.NewUint64(table, "vmalloc_used")
	c.VmallocChunk = field.NewUint64(table, "vmalloc_chunk")
	c.HugePagesTotal = field.NewUint64(table, "huge_pages_total")
	c.HugePagesFree = field.NewUint64(table, "huge_pages_free")
	c.HugePagesRsvd = field.NewUint64(table, "huge_pages_rsvd")
	c.HugePagesSurp = field.NewUint64(table, "huge_pages_surp")
	c.HugePageSize = field.NewUint64(table, "huge_page_size")
	c.AnonHugePages = field.NewUint64(table, "anon_huge_pages")
	c.CreateAt = field.NewTime(table, "create_at")

	c.fillFieldMap()

	return c
}

func (c *cjMachineVirtualMemory) WithContext(ctx context.Context) *cjMachineVirtualMemoryDo {
	return c.cjMachineVirtualMemoryDo.WithContext(ctx)
}

func (c cjMachineVirtualMemory) TableName() string { return c.cjMachineVirtualMemoryDo.TableName() }

func (c cjMachineVirtualMemory) Alias() string { return c.cjMachineVirtualMemoryDo.Alias() }

func (c cjMachineVirtualMemory) Columns(cols ...field.Expr) gen.Columns {
	return c.cjMachineVirtualMemoryDo.Columns(cols...)
}

func (c *cjMachineVirtualMemory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cjMachineVirtualMemory) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 40)
	c.fieldMap["id"] = c.ID
	c.fieldMap["total"] = c.Total
	c.fieldMap["available"] = c.Available
	c.fieldMap["used"] = c.Used
	c.fieldMap["used_percent"] = c.UsedPercent
	c.fieldMap["free"] = c.Free
	c.fieldMap["active"] = c.Active
	c.fieldMap["inactive"] = c.Inactive
	c.fieldMap["wired"] = c.Wired
	c.fieldMap["laundry"] = c.Laundry
	c.fieldMap["buffers"] = c.Buffers
	c.fieldMap["cached"] = c.Cached
	c.fieldMap["write_back"] = c.WriteBack
	c.fieldMap["dirty"] = c.Dirty
	c.fieldMap["write_back_tmp"] = c.WriteBackTmp
	c.fieldMap["shared"] = c.Shared
	c.fieldMap["slab"] = c.Slab
	c.fieldMap["sreclaimable"] = c.Sreclaimable
	c.fieldMap["sunreclaim"] = c.Sunreclaim
	c.fieldMap["page_tables"] = c.PageTables
	c.fieldMap["swap_cached"] = c.SwapCached
	c.fieldMap["commit_limit"] = c.CommitLimit
	c.fieldMap["committed_as"] = c.CommittedAs
	c.fieldMap["high_total"] = c.HighTotal
	c.fieldMap["high_free"] = c.HighFree
	c.fieldMap["low_total"] = c.LowTotal
	c.fieldMap["low_free"] = c.LowFree
	c.fieldMap["swap_total"] = c.SwapTotal
	c.fieldMap["swap_free"] = c.SwapFree
	c.fieldMap["mapped"] = c.Mapped
	c.fieldMap["vmalloc_total"] = c.VmallocTotal
	c.fieldMap["vmalloc_used"] = c.VmallocUsed
	c.fieldMap["vmalloc_chunk"] = c.VmallocChunk
	c.fieldMap["huge_pages_total"] = c.HugePagesTotal
	c.fieldMap["huge_pages_free"] = c.HugePagesFree
	c.fieldMap["huge_pages_rsvd"] = c.HugePagesRsvd
	c.fieldMap["huge_pages_surp"] = c.HugePagesSurp
	c.fieldMap["huge_page_size"] = c.HugePageSize
	c.fieldMap["anon_huge_pages"] = c.AnonHugePages
	c.fieldMap["create_at"] = c.CreateAt
}

func (c cjMachineVirtualMemory) clone(db *gorm.DB) cjMachineVirtualMemory {
	c.cjMachineVirtualMemoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cjMachineVirtualMemory) replaceDB(db *gorm.DB) cjMachineVirtualMemory {
	c.cjMachineVirtualMemoryDo.ReplaceDB(db)
	return c
}

type cjMachineVirtualMemoryDo struct{ gen.DO }

func (c cjMachineVirtualMemoryDo) Debug() *cjMachineVirtualMemoryDo {
	return c.withDO(c.DO.Debug())
}

func (c cjMachineVirtualMemoryDo) WithContext(ctx context.Context) *cjMachineVirtualMemoryDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cjMachineVirtualMemoryDo) ReadDB() *cjMachineVirtualMemoryDo {
	return c.Clauses(dbresolver.Read)
}

func (c cjMachineVirtualMemoryDo) WriteDB() *cjMachineVirtualMemoryDo {
	return c.Clauses(dbresolver.Write)
}

func (c cjMachineVirtualMemoryDo) Session(config *gorm.Session) *cjMachineVirtualMemoryDo {
	return c.withDO(c.DO.Session(config))
}

func (c cjMachineVirtualMemoryDo) Clauses(conds ...clause.Expression) *cjMachineVirtualMemoryDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cjMachineVirtualMemoryDo) Returning(value interface{}, columns ...string) *cjMachineVirtualMemoryDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cjMachineVirtualMemoryDo) Not(conds ...gen.Condition) *cjMachineVirtualMemoryDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cjMachineVirtualMemoryDo) Or(conds ...gen.Condition) *cjMachineVirtualMemoryDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cjMachineVirtualMemoryDo) Select(conds ...field.Expr) *cjMachineVirtualMemoryDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cjMachineVirtualMemoryDo) Where(conds ...gen.Condition) *cjMachineVirtualMemoryDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cjMachineVirtualMemoryDo) Order(conds ...field.Expr) *cjMachineVirtualMemoryDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cjMachineVirtualMemoryDo) Distinct(cols ...field.Expr) *cjMachineVirtualMemoryDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cjMachineVirtualMemoryDo) Omit(cols ...field.Expr) *cjMachineVirtualMemoryDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cjMachineVirtualMemoryDo) Join(table schema.Tabler, on ...field.Expr) *cjMachineVirtualMemoryDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cjMachineVirtualMemoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) *cjMachineVirtualMemoryDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cjMachineVirtualMemoryDo) RightJoin(table schema.Tabler, on ...field.Expr) *cjMachineVirtualMemoryDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cjMachineVirtualMemoryDo) Group(cols ...field.Expr) *cjMachineVirtualMemoryDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cjMachineVirtualMemoryDo) Having(conds ...gen.Condition) *cjMachineVirtualMemoryDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cjMachineVirtualMemoryDo) Limit(limit int) *cjMachineVirtualMemoryDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cjMachineVirtualMemoryDo) Offset(offset int) *cjMachineVirtualMemoryDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cjMachineVirtualMemoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *cjMachineVirtualMemoryDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cjMachineVirtualMemoryDo) Unscoped() *cjMachineVirtualMemoryDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cjMachineVirtualMemoryDo) Create(values ...*model.CjMachineVirtualMemory) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cjMachineVirtualMemoryDo) CreateInBatches(values []*model.CjMachineVirtualMemory, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cjMachineVirtualMemoryDo) Save(values ...*model.CjMachineVirtualMemory) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cjMachineVirtualMemoryDo) First() (*model.CjMachineVirtualMemory, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CjMachineVirtualMemory), nil
	}
}

func (c cjMachineVirtualMemoryDo) Take() (*model.CjMachineVirtualMemory, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CjMachineVirtualMemory), nil
	}
}

func (c cjMachineVirtualMemoryDo) Last() (*model.CjMachineVirtualMemory, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CjMachineVirtualMemory), nil
	}
}

func (c cjMachineVirtualMemoryDo) Find() ([]*model.CjMachineVirtualMemory, error) {
	result, err := c.DO.Find()
	return result.([]*model.CjMachineVirtualMemory), err
}

func (c cjMachineVirtualMemoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CjMachineVirtualMemory, err error) {
	buf := make([]*model.CjMachineVirtualMemory, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cjMachineVirtualMemoryDo) FindInBatches(result *[]*model.CjMachineVirtualMemory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cjMachineVirtualMemoryDo) Attrs(attrs ...field.AssignExpr) *cjMachineVirtualMemoryDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cjMachineVirtualMemoryDo) Assign(attrs ...field.AssignExpr) *cjMachineVirtualMemoryDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cjMachineVirtualMemoryDo) Joins(fields ...field.RelationField) *cjMachineVirtualMemoryDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cjMachineVirtualMemoryDo) Preload(fields ...field.RelationField) *cjMachineVirtualMemoryDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cjMachineVirtualMemoryDo) FirstOrInit() (*model.CjMachineVirtualMemory, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CjMachineVirtualMemory), nil
	}
}

func (c cjMachineVirtualMemoryDo) FirstOrCreate() (*model.CjMachineVirtualMemory, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CjMachineVirtualMemory), nil
	}
}

func (c cjMachineVirtualMemoryDo) FindByPage(offset int, limit int) (result []*model.CjMachineVirtualMemory, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cjMachineVirtualMemoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cjMachineVirtualMemoryDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cjMachineVirtualMemoryDo) Delete(models ...*model.CjMachineVirtualMemory) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cjMachineVirtualMemoryDo) withDO(do gen.Dao) *cjMachineVirtualMemoryDo {
	c.DO = *do.(*gen.DO)
	return c
}
