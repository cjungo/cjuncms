// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package entity

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/cjungo/cjuncms/model"
)

func newCjMachineVirtualMemory(db *gorm.DB, opts ...gen.DOOption) cjMachineVirtualMemory {
	_cjMachineVirtualMemory := cjMachineVirtualMemory{}

	_cjMachineVirtualMemory.cjMachineVirtualMemoryDo.UseDB(db, opts...)
	_cjMachineVirtualMemory.cjMachineVirtualMemoryDo.UseModel(&model.CjMachineVirtualMemory{})

	tableName := _cjMachineVirtualMemory.cjMachineVirtualMemoryDo.TableName()
	_cjMachineVirtualMemory.ALL = field.NewAsterisk(tableName)
	_cjMachineVirtualMemory.ID = field.NewInt32(tableName, "id")
	_cjMachineVirtualMemory.Total = field.NewFloat32(tableName, "total")
	_cjMachineVirtualMemory.Available = field.NewFloat32(tableName, "available")
	_cjMachineVirtualMemory.Used = field.NewFloat32(tableName, "used")
	_cjMachineVirtualMemory.UsedPercent = field.NewFloat32(tableName, "used_percent")
	_cjMachineVirtualMemory.Free = field.NewFloat32(tableName, "free")
	_cjMachineVirtualMemory.Active = field.NewFloat32(tableName, "active")
	_cjMachineVirtualMemory.Inactive = field.NewFloat32(tableName, "inactive")
	_cjMachineVirtualMemory.Wired = field.NewFloat32(tableName, "wired")
	_cjMachineVirtualMemory.Laundry = field.NewFloat32(tableName, "laundry")
	_cjMachineVirtualMemory.Buffers = field.NewFloat32(tableName, "buffers")
	_cjMachineVirtualMemory.Cached = field.NewFloat32(tableName, "cached")
	_cjMachineVirtualMemory.WriteBack = field.NewFloat32(tableName, "write_back")
	_cjMachineVirtualMemory.Dirty = field.NewFloat32(tableName, "dirty")
	_cjMachineVirtualMemory.WriteBackTmp = field.NewFloat32(tableName, "write_back_tmp")
	_cjMachineVirtualMemory.Shared = field.NewFloat32(tableName, "shared")
	_cjMachineVirtualMemory.Slab = field.NewFloat32(tableName, "slab")
	_cjMachineVirtualMemory.Sreclaimable = field.NewFloat32(tableName, "sreclaimable")
	_cjMachineVirtualMemory.Sunreclaim = field.NewFloat32(tableName, "sunreclaim")
	_cjMachineVirtualMemory.PageTables = field.NewFloat32(tableName, "page_tables")
	_cjMachineVirtualMemory.SwapCached = field.NewFloat32(tableName, "swap_cached")
	_cjMachineVirtualMemory.CommitLimit = field.NewFloat32(tableName, "commit_limit")
	_cjMachineVirtualMemory.CommittedAs = field.NewFloat32(tableName, "committed_as")
	_cjMachineVirtualMemory.HighTotal = field.NewFloat32(tableName, "high_total")
	_cjMachineVirtualMemory.HighFree = field.NewFloat32(tableName, "high_free")
	_cjMachineVirtualMemory.LowTotal = field.NewFloat32(tableName, "low_total")
	_cjMachineVirtualMemory.LowFree = field.NewFloat32(tableName, "low_free")
	_cjMachineVirtualMemory.SwapTotal = field.NewFloat32(tableName, "swap_total")
	_cjMachineVirtualMemory.SwapFree = field.NewFloat32(tableName, "swap_free")
	_cjMachineVirtualMemory.Mapped = field.NewFloat32(tableName, "mapped")
	_cjMachineVirtualMemory.VmallocTotal = field.NewFloat32(tableName, "vmalloc_total")
	_cjMachineVirtualMemory.VmallocUsed = field.NewFloat32(tableName, "vmalloc_used")
	_cjMachineVirtualMemory.VmallocChunk = field.NewFloat32(tableName, "vmalloc_chunk")
	_cjMachineVirtualMemory.HugePagesTotal = field.NewFloat32(tableName, "huge_pages_total")
	_cjMachineVirtualMemory.HugePagesFree = field.NewFloat32(tableName, "huge_pages_free")
	_cjMachineVirtualMemory.HugePagesRsvd = field.NewFloat32(tableName, "huge_pages_rsvd")
	_cjMachineVirtualMemory.HugePagesSurp = field.NewFloat32(tableName, "huge_pages_surp")
	_cjMachineVirtualMemory.HugePageSize = field.NewFloat32(tableName, "huge_page_size")
	_cjMachineVirtualMemory.AnonHugePages = field.NewFloat32(tableName, "anon_huge_pages")
	_cjMachineVirtualMemory.CreateAt = field.NewTime(tableName, "create_at")

	_cjMachineVirtualMemory.fillFieldMap()

	return _cjMachineVirtualMemory
}

// cjMachineVirtualMemory 内存
type cjMachineVirtualMemory struct {
	cjMachineVirtualMemoryDo cjMachineVirtualMemoryDo

	ALL            field.Asterisk
	ID             field.Int32
	Total          field.Float32 // 全部
	Available      field.Float32
	Used           field.Float32 // 已用
	UsedPercent    field.Float32
	Free           field.Float32 // 空闲
	Active         field.Float32
	Inactive       field.Float32
	Wired          field.Float32
	Laundry        field.Float32
	Buffers        field.Float32
	Cached         field.Float32
	WriteBack      field.Float32
	Dirty          field.Float32
	WriteBackTmp   field.Float32
	Shared         field.Float32
	Slab           field.Float32
	Sreclaimable   field.Float32
	Sunreclaim     field.Float32
	PageTables     field.Float32
	SwapCached     field.Float32
	CommitLimit    field.Float32
	CommittedAs    field.Float32
	HighTotal      field.Float32
	HighFree       field.Float32
	LowTotal       field.Float32
	LowFree        field.Float32
	SwapTotal      field.Float32
	SwapFree       field.Float32
	Mapped         field.Float32
	VmallocTotal   field.Float32
	VmallocUsed    field.Float32
	VmallocChunk   field.Float32
	HugePagesTotal field.Float32
	HugePagesFree  field.Float32
	HugePagesRsvd  field.Float32
	HugePagesSurp  field.Float32
	HugePageSize   field.Float32
	AnonHugePages  field.Float32
	CreateAt       field.Time // 记录时间

	fieldMap map[string]field.Expr
}

func (c cjMachineVirtualMemory) Table(newTableName string) *cjMachineVirtualMemory {
	c.cjMachineVirtualMemoryDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cjMachineVirtualMemory) As(alias string) *cjMachineVirtualMemory {
	c.cjMachineVirtualMemoryDo.DO = *(c.cjMachineVirtualMemoryDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cjMachineVirtualMemory) updateTableName(table string) *cjMachineVirtualMemory {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt32(table, "id")
	c.Total = field.NewFloat32(table, "total")
	c.Available = field.NewFloat32(table, "available")
	c.Used = field.NewFloat32(table, "used")
	c.UsedPercent = field.NewFloat32(table, "used_percent")
	c.Free = field.NewFloat32(table, "free")
	c.Active = field.NewFloat32(table, "active")
	c.Inactive = field.NewFloat32(table, "inactive")
	c.Wired = field.NewFloat32(table, "wired")
	c.Laundry = field.NewFloat32(table, "laundry")
	c.Buffers = field.NewFloat32(table, "buffers")
	c.Cached = field.NewFloat32(table, "cached")
	c.WriteBack = field.NewFloat32(table, "write_back")
	c.Dirty = field.NewFloat32(table, "dirty")
	c.WriteBackTmp = field.NewFloat32(table, "write_back_tmp")
	c.Shared = field.NewFloat32(table, "shared")
	c.Slab = field.NewFloat32(table, "slab")
	c.Sreclaimable = field.NewFloat32(table, "sreclaimable")
	c.Sunreclaim = field.NewFloat32(table, "sunreclaim")
	c.PageTables = field.NewFloat32(table, "page_tables")
	c.SwapCached = field.NewFloat32(table, "swap_cached")
	c.CommitLimit = field.NewFloat32(table, "commit_limit")
	c.CommittedAs = field.NewFloat32(table, "committed_as")
	c.HighTotal = field.NewFloat32(table, "high_total")
	c.HighFree = field.NewFloat32(table, "high_free")
	c.LowTotal = field.NewFloat32(table, "low_total")
	c.LowFree = field.NewFloat32(table, "low_free")
	c.SwapTotal = field.NewFloat32(table, "swap_total")
	c.SwapFree = field.NewFloat32(table, "swap_free")
	c.Mapped = field.NewFloat32(table, "mapped")
	c.VmallocTotal = field.NewFloat32(table, "vmalloc_total")
	c.VmallocUsed = field.NewFloat32(table, "vmalloc_used")
	c.VmallocChunk = field.NewFloat32(table, "vmalloc_chunk")
	c.HugePagesTotal = field.NewFloat32(table, "huge_pages_total")
	c.HugePagesFree = field.NewFloat32(table, "huge_pages_free")
	c.HugePagesRsvd = field.NewFloat32(table, "huge_pages_rsvd")
	c.HugePagesSurp = field.NewFloat32(table, "huge_pages_surp")
	c.HugePageSize = field.NewFloat32(table, "huge_page_size")
	c.AnonHugePages = field.NewFloat32(table, "anon_huge_pages")
	c.CreateAt = field.NewTime(table, "create_at")

	c.fillFieldMap()

	return c
}

func (c *cjMachineVirtualMemory) WithContext(ctx context.Context) *cjMachineVirtualMemoryDo {
	return c.cjMachineVirtualMemoryDo.WithContext(ctx)
}

func (c cjMachineVirtualMemory) TableName() string { return c.cjMachineVirtualMemoryDo.TableName() }

func (c cjMachineVirtualMemory) Alias() string { return c.cjMachineVirtualMemoryDo.Alias() }

func (c cjMachineVirtualMemory) Columns(cols ...field.Expr) gen.Columns {
	return c.cjMachineVirtualMemoryDo.Columns(cols...)
}

func (c *cjMachineVirtualMemory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cjMachineVirtualMemory) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 40)
	c.fieldMap["id"] = c.ID
	c.fieldMap["total"] = c.Total
	c.fieldMap["available"] = c.Available
	c.fieldMap["used"] = c.Used
	c.fieldMap["used_percent"] = c.UsedPercent
	c.fieldMap["free"] = c.Free
	c.fieldMap["active"] = c.Active
	c.fieldMap["inactive"] = c.Inactive
	c.fieldMap["wired"] = c.Wired
	c.fieldMap["laundry"] = c.Laundry
	c.fieldMap["buffers"] = c.Buffers
	c.fieldMap["cached"] = c.Cached
	c.fieldMap["write_back"] = c.WriteBack
	c.fieldMap["dirty"] = c.Dirty
	c.fieldMap["write_back_tmp"] = c.WriteBackTmp
	c.fieldMap["shared"] = c.Shared
	c.fieldMap["slab"] = c.Slab
	c.fieldMap["sreclaimable"] = c.Sreclaimable
	c.fieldMap["sunreclaim"] = c.Sunreclaim
	c.fieldMap["page_tables"] = c.PageTables
	c.fieldMap["swap_cached"] = c.SwapCached
	c.fieldMap["commit_limit"] = c.CommitLimit
	c.fieldMap["committed_as"] = c.CommittedAs
	c.fieldMap["high_total"] = c.HighTotal
	c.fieldMap["high_free"] = c.HighFree
	c.fieldMap["low_total"] = c.LowTotal
	c.fieldMap["low_free"] = c.LowFree
	c.fieldMap["swap_total"] = c.SwapTotal
	c.fieldMap["swap_free"] = c.SwapFree
	c.fieldMap["mapped"] = c.Mapped
	c.fieldMap["vmalloc_total"] = c.VmallocTotal
	c.fieldMap["vmalloc_used"] = c.VmallocUsed
	c.fieldMap["vmalloc_chunk"] = c.VmallocChunk
	c.fieldMap["huge_pages_total"] = c.HugePagesTotal
	c.fieldMap["huge_pages_free"] = c.HugePagesFree
	c.fieldMap["huge_pages_rsvd"] = c.HugePagesRsvd
	c.fieldMap["huge_pages_surp"] = c.HugePagesSurp
	c.fieldMap["huge_page_size"] = c.HugePageSize
	c.fieldMap["anon_huge_pages"] = c.AnonHugePages
	c.fieldMap["create_at"] = c.CreateAt
}

func (c cjMachineVirtualMemory) clone(db *gorm.DB) cjMachineVirtualMemory {
	c.cjMachineVirtualMemoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cjMachineVirtualMemory) replaceDB(db *gorm.DB) cjMachineVirtualMemory {
	c.cjMachineVirtualMemoryDo.ReplaceDB(db)
	return c
}

type cjMachineVirtualMemoryDo struct{ gen.DO }

func (c cjMachineVirtualMemoryDo) Debug() *cjMachineVirtualMemoryDo {
	return c.withDO(c.DO.Debug())
}

func (c cjMachineVirtualMemoryDo) WithContext(ctx context.Context) *cjMachineVirtualMemoryDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cjMachineVirtualMemoryDo) ReadDB() *cjMachineVirtualMemoryDo {
	return c.Clauses(dbresolver.Read)
}

func (c cjMachineVirtualMemoryDo) WriteDB() *cjMachineVirtualMemoryDo {
	return c.Clauses(dbresolver.Write)
}

func (c cjMachineVirtualMemoryDo) Session(config *gorm.Session) *cjMachineVirtualMemoryDo {
	return c.withDO(c.DO.Session(config))
}

func (c cjMachineVirtualMemoryDo) Clauses(conds ...clause.Expression) *cjMachineVirtualMemoryDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cjMachineVirtualMemoryDo) Returning(value interface{}, columns ...string) *cjMachineVirtualMemoryDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cjMachineVirtualMemoryDo) Not(conds ...gen.Condition) *cjMachineVirtualMemoryDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cjMachineVirtualMemoryDo) Or(conds ...gen.Condition) *cjMachineVirtualMemoryDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cjMachineVirtualMemoryDo) Select(conds ...field.Expr) *cjMachineVirtualMemoryDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cjMachineVirtualMemoryDo) Where(conds ...gen.Condition) *cjMachineVirtualMemoryDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cjMachineVirtualMemoryDo) Order(conds ...field.Expr) *cjMachineVirtualMemoryDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cjMachineVirtualMemoryDo) Distinct(cols ...field.Expr) *cjMachineVirtualMemoryDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cjMachineVirtualMemoryDo) Omit(cols ...field.Expr) *cjMachineVirtualMemoryDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cjMachineVirtualMemoryDo) Join(table schema.Tabler, on ...field.Expr) *cjMachineVirtualMemoryDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cjMachineVirtualMemoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) *cjMachineVirtualMemoryDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cjMachineVirtualMemoryDo) RightJoin(table schema.Tabler, on ...field.Expr) *cjMachineVirtualMemoryDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cjMachineVirtualMemoryDo) Group(cols ...field.Expr) *cjMachineVirtualMemoryDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cjMachineVirtualMemoryDo) Having(conds ...gen.Condition) *cjMachineVirtualMemoryDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cjMachineVirtualMemoryDo) Limit(limit int) *cjMachineVirtualMemoryDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cjMachineVirtualMemoryDo) Offset(offset int) *cjMachineVirtualMemoryDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cjMachineVirtualMemoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *cjMachineVirtualMemoryDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cjMachineVirtualMemoryDo) Unscoped() *cjMachineVirtualMemoryDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cjMachineVirtualMemoryDo) Create(values ...*model.CjMachineVirtualMemory) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cjMachineVirtualMemoryDo) CreateInBatches(values []*model.CjMachineVirtualMemory, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cjMachineVirtualMemoryDo) Save(values ...*model.CjMachineVirtualMemory) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cjMachineVirtualMemoryDo) First() (*model.CjMachineVirtualMemory, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CjMachineVirtualMemory), nil
	}
}

func (c cjMachineVirtualMemoryDo) Take() (*model.CjMachineVirtualMemory, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CjMachineVirtualMemory), nil
	}
}

func (c cjMachineVirtualMemoryDo) Last() (*model.CjMachineVirtualMemory, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CjMachineVirtualMemory), nil
	}
}

func (c cjMachineVirtualMemoryDo) Find() ([]*model.CjMachineVirtualMemory, error) {
	result, err := c.DO.Find()
	return result.([]*model.CjMachineVirtualMemory), err
}

func (c cjMachineVirtualMemoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CjMachineVirtualMemory, err error) {
	buf := make([]*model.CjMachineVirtualMemory, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cjMachineVirtualMemoryDo) FindInBatches(result *[]*model.CjMachineVirtualMemory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cjMachineVirtualMemoryDo) Attrs(attrs ...field.AssignExpr) *cjMachineVirtualMemoryDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cjMachineVirtualMemoryDo) Assign(attrs ...field.AssignExpr) *cjMachineVirtualMemoryDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cjMachineVirtualMemoryDo) Joins(fields ...field.RelationField) *cjMachineVirtualMemoryDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cjMachineVirtualMemoryDo) Preload(fields ...field.RelationField) *cjMachineVirtualMemoryDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cjMachineVirtualMemoryDo) FirstOrInit() (*model.CjMachineVirtualMemory, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CjMachineVirtualMemory), nil
	}
}

func (c cjMachineVirtualMemoryDo) FirstOrCreate() (*model.CjMachineVirtualMemory, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CjMachineVirtualMemory), nil
	}
}

func (c cjMachineVirtualMemoryDo) FindByPage(offset int, limit int) (result []*model.CjMachineVirtualMemory, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cjMachineVirtualMemoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cjMachineVirtualMemoryDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cjMachineVirtualMemoryDo) Delete(models ...*model.CjMachineVirtualMemory) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cjMachineVirtualMemoryDo) withDO(do gen.Dao) *cjMachineVirtualMemoryDo {
	c.DO = *do.(*gen.DO)
	return c
}
