// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package entity

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                     db,
		CjEmployee:             newCjEmployee(db, opts...),
		CjEmployeePermission:   newCjEmployeePermission(db, opts...),
		CjMachineCPUTime:       newCjMachineCPUTime(db, opts...),
		CjMachineDiskUsage:     newCjMachineDiskUsage(db, opts...),
		CjMachineProcess:       newCjMachineProcess(db, opts...),
		CjMachineVirtualMemory: newCjMachineVirtualMemory(db, opts...),
		CjOperation:            newCjOperation(db, opts...),
		CjPass:                 newCjPass(db, opts...),
		CjPermission:           newCjPermission(db, opts...),
		CjProject:              newCjProject(db, opts...),
		CjProjectEmployee:      newCjProjectEmployee(db, opts...),
		CjScript:               newCjScript(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	CjEmployee             cjEmployee
	CjEmployeePermission   cjEmployeePermission
	CjMachineCPUTime       cjMachineCPUTime
	CjMachineDiskUsage     cjMachineDiskUsage
	CjMachineProcess       cjMachineProcess
	CjMachineVirtualMemory cjMachineVirtualMemory
	CjOperation            cjOperation
	CjPass                 cjPass
	CjPermission           cjPermission
	CjProject              cjProject
	CjProjectEmployee      cjProjectEmployee
	CjScript               cjScript
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                     db,
		CjEmployee:             q.CjEmployee.clone(db),
		CjEmployeePermission:   q.CjEmployeePermission.clone(db),
		CjMachineCPUTime:       q.CjMachineCPUTime.clone(db),
		CjMachineDiskUsage:     q.CjMachineDiskUsage.clone(db),
		CjMachineProcess:       q.CjMachineProcess.clone(db),
		CjMachineVirtualMemory: q.CjMachineVirtualMemory.clone(db),
		CjOperation:            q.CjOperation.clone(db),
		CjPass:                 q.CjPass.clone(db),
		CjPermission:           q.CjPermission.clone(db),
		CjProject:              q.CjProject.clone(db),
		CjProjectEmployee:      q.CjProjectEmployee.clone(db),
		CjScript:               q.CjScript.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                     db,
		CjEmployee:             q.CjEmployee.replaceDB(db),
		CjEmployeePermission:   q.CjEmployeePermission.replaceDB(db),
		CjMachineCPUTime:       q.CjMachineCPUTime.replaceDB(db),
		CjMachineDiskUsage:     q.CjMachineDiskUsage.replaceDB(db),
		CjMachineProcess:       q.CjMachineProcess.replaceDB(db),
		CjMachineVirtualMemory: q.CjMachineVirtualMemory.replaceDB(db),
		CjOperation:            q.CjOperation.replaceDB(db),
		CjPass:                 q.CjPass.replaceDB(db),
		CjPermission:           q.CjPermission.replaceDB(db),
		CjProject:              q.CjProject.replaceDB(db),
		CjProjectEmployee:      q.CjProjectEmployee.replaceDB(db),
		CjScript:               q.CjScript.replaceDB(db),
	}
}

type queryCtx struct {
	CjEmployee             *cjEmployeeDo
	CjEmployeePermission   *cjEmployeePermissionDo
	CjMachineCPUTime       *cjMachineCPUTimeDo
	CjMachineDiskUsage     *cjMachineDiskUsageDo
	CjMachineProcess       *cjMachineProcessDo
	CjMachineVirtualMemory *cjMachineVirtualMemoryDo
	CjOperation            *cjOperationDo
	CjPass                 *cjPassDo
	CjPermission           *cjPermissionDo
	CjProject              *cjProjectDo
	CjProjectEmployee      *cjProjectEmployeeDo
	CjScript               *cjScriptDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		CjEmployee:             q.CjEmployee.WithContext(ctx),
		CjEmployeePermission:   q.CjEmployeePermission.WithContext(ctx),
		CjMachineCPUTime:       q.CjMachineCPUTime.WithContext(ctx),
		CjMachineDiskUsage:     q.CjMachineDiskUsage.WithContext(ctx),
		CjMachineProcess:       q.CjMachineProcess.WithContext(ctx),
		CjMachineVirtualMemory: q.CjMachineVirtualMemory.WithContext(ctx),
		CjOperation:            q.CjOperation.WithContext(ctx),
		CjPass:                 q.CjPass.WithContext(ctx),
		CjPermission:           q.CjPermission.WithContext(ctx),
		CjProject:              q.CjProject.WithContext(ctx),
		CjProjectEmployee:      q.CjProjectEmployee.WithContext(ctx),
		CjScript:               q.CjScript.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
