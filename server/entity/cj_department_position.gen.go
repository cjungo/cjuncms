// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package entity

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/cjungo/cjuncms/model"
)

func newCjDepartmentPosition(db *gorm.DB, opts ...gen.DOOption) cjDepartmentPosition {
	_cjDepartmentPosition := cjDepartmentPosition{}

	_cjDepartmentPosition.cjDepartmentPositionDo.UseDB(db, opts...)
	_cjDepartmentPosition.cjDepartmentPositionDo.UseModel(&model.CjDepartmentPosition{})

	tableName := _cjDepartmentPosition.cjDepartmentPositionDo.TableName()
	_cjDepartmentPosition.ALL = field.NewAsterisk(tableName)
	_cjDepartmentPosition.ID = field.NewUint32(tableName, "id")
	_cjDepartmentPosition.DepartmentID = field.NewUint32(tableName, "department_id")
	_cjDepartmentPosition.Title = field.NewString(tableName, "title")
	_cjDepartmentPosition.CreateAt = field.NewTime(tableName, "create_at")

	_cjDepartmentPosition.fillFieldMap()

	return _cjDepartmentPosition
}

// cjDepartmentPosition 职位
type cjDepartmentPosition struct {
	cjDepartmentPositionDo cjDepartmentPositionDo

	ALL          field.Asterisk
	ID           field.Uint32
	DepartmentID field.Uint32 // 部门ID
	Title        field.String
	CreateAt     field.Time

	fieldMap map[string]field.Expr
}

func (c cjDepartmentPosition) Table(newTableName string) *cjDepartmentPosition {
	c.cjDepartmentPositionDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cjDepartmentPosition) As(alias string) *cjDepartmentPosition {
	c.cjDepartmentPositionDo.DO = *(c.cjDepartmentPositionDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cjDepartmentPosition) updateTableName(table string) *cjDepartmentPosition {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint32(table, "id")
	c.DepartmentID = field.NewUint32(table, "department_id")
	c.Title = field.NewString(table, "title")
	c.CreateAt = field.NewTime(table, "create_at")

	c.fillFieldMap()

	return c
}

func (c *cjDepartmentPosition) WithContext(ctx context.Context) *cjDepartmentPositionDo {
	return c.cjDepartmentPositionDo.WithContext(ctx)
}

func (c cjDepartmentPosition) TableName() string { return c.cjDepartmentPositionDo.TableName() }

func (c cjDepartmentPosition) Alias() string { return c.cjDepartmentPositionDo.Alias() }

func (c cjDepartmentPosition) Columns(cols ...field.Expr) gen.Columns {
	return c.cjDepartmentPositionDo.Columns(cols...)
}

func (c *cjDepartmentPosition) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cjDepartmentPosition) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 4)
	c.fieldMap["id"] = c.ID
	c.fieldMap["department_id"] = c.DepartmentID
	c.fieldMap["title"] = c.Title
	c.fieldMap["create_at"] = c.CreateAt
}

func (c cjDepartmentPosition) clone(db *gorm.DB) cjDepartmentPosition {
	c.cjDepartmentPositionDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cjDepartmentPosition) replaceDB(db *gorm.DB) cjDepartmentPosition {
	c.cjDepartmentPositionDo.ReplaceDB(db)
	return c
}

type cjDepartmentPositionDo struct{ gen.DO }

func (c cjDepartmentPositionDo) Debug() *cjDepartmentPositionDo {
	return c.withDO(c.DO.Debug())
}

func (c cjDepartmentPositionDo) WithContext(ctx context.Context) *cjDepartmentPositionDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cjDepartmentPositionDo) ReadDB() *cjDepartmentPositionDo {
	return c.Clauses(dbresolver.Read)
}

func (c cjDepartmentPositionDo) WriteDB() *cjDepartmentPositionDo {
	return c.Clauses(dbresolver.Write)
}

func (c cjDepartmentPositionDo) Session(config *gorm.Session) *cjDepartmentPositionDo {
	return c.withDO(c.DO.Session(config))
}

func (c cjDepartmentPositionDo) Clauses(conds ...clause.Expression) *cjDepartmentPositionDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cjDepartmentPositionDo) Returning(value interface{}, columns ...string) *cjDepartmentPositionDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cjDepartmentPositionDo) Not(conds ...gen.Condition) *cjDepartmentPositionDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cjDepartmentPositionDo) Or(conds ...gen.Condition) *cjDepartmentPositionDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cjDepartmentPositionDo) Select(conds ...field.Expr) *cjDepartmentPositionDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cjDepartmentPositionDo) Where(conds ...gen.Condition) *cjDepartmentPositionDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cjDepartmentPositionDo) Order(conds ...field.Expr) *cjDepartmentPositionDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cjDepartmentPositionDo) Distinct(cols ...field.Expr) *cjDepartmentPositionDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cjDepartmentPositionDo) Omit(cols ...field.Expr) *cjDepartmentPositionDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cjDepartmentPositionDo) Join(table schema.Tabler, on ...field.Expr) *cjDepartmentPositionDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cjDepartmentPositionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *cjDepartmentPositionDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cjDepartmentPositionDo) RightJoin(table schema.Tabler, on ...field.Expr) *cjDepartmentPositionDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cjDepartmentPositionDo) Group(cols ...field.Expr) *cjDepartmentPositionDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cjDepartmentPositionDo) Having(conds ...gen.Condition) *cjDepartmentPositionDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cjDepartmentPositionDo) Limit(limit int) *cjDepartmentPositionDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cjDepartmentPositionDo) Offset(offset int) *cjDepartmentPositionDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cjDepartmentPositionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *cjDepartmentPositionDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cjDepartmentPositionDo) Unscoped() *cjDepartmentPositionDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cjDepartmentPositionDo) Create(values ...*model.CjDepartmentPosition) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cjDepartmentPositionDo) CreateInBatches(values []*model.CjDepartmentPosition, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cjDepartmentPositionDo) Save(values ...*model.CjDepartmentPosition) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cjDepartmentPositionDo) First() (*model.CjDepartmentPosition, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CjDepartmentPosition), nil
	}
}

func (c cjDepartmentPositionDo) Take() (*model.CjDepartmentPosition, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CjDepartmentPosition), nil
	}
}

func (c cjDepartmentPositionDo) Last() (*model.CjDepartmentPosition, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CjDepartmentPosition), nil
	}
}

func (c cjDepartmentPositionDo) Find() ([]*model.CjDepartmentPosition, error) {
	result, err := c.DO.Find()
	return result.([]*model.CjDepartmentPosition), err
}

func (c cjDepartmentPositionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CjDepartmentPosition, err error) {
	buf := make([]*model.CjDepartmentPosition, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cjDepartmentPositionDo) FindInBatches(result *[]*model.CjDepartmentPosition, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cjDepartmentPositionDo) Attrs(attrs ...field.AssignExpr) *cjDepartmentPositionDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cjDepartmentPositionDo) Assign(attrs ...field.AssignExpr) *cjDepartmentPositionDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cjDepartmentPositionDo) Joins(fields ...field.RelationField) *cjDepartmentPositionDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cjDepartmentPositionDo) Preload(fields ...field.RelationField) *cjDepartmentPositionDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cjDepartmentPositionDo) FirstOrInit() (*model.CjDepartmentPosition, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CjDepartmentPosition), nil
	}
}

func (c cjDepartmentPositionDo) FirstOrCreate() (*model.CjDepartmentPosition, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CjDepartmentPosition), nil
	}
}

func (c cjDepartmentPositionDo) FindByPage(offset int, limit int) (result []*model.CjDepartmentPosition, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cjDepartmentPositionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cjDepartmentPositionDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cjDepartmentPositionDo) Delete(models ...*model.CjDepartmentPosition) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cjDepartmentPositionDo) withDO(do gen.Dao) *cjDepartmentPositionDo {
	c.DO = *do.(*gen.DO)
	return c
}
