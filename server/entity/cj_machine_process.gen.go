// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package entity

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/cjungo/cjuncms/model"
)

func newCjMachineProcess(db *gorm.DB, opts ...gen.DOOption) cjMachineProcess {
	_cjMachineProcess := cjMachineProcess{}

	_cjMachineProcess.cjMachineProcessDo.UseDB(db, opts...)
	_cjMachineProcess.cjMachineProcessDo.UseModel(&model.CjMachineProcess{})

	tableName := _cjMachineProcess.cjMachineProcessDo.TableName()
	_cjMachineProcess.ALL = field.NewAsterisk(tableName)
	_cjMachineProcess.ID = field.NewUint32(tableName, "id")
	_cjMachineProcess.Pid = field.NewInt32(tableName, "pid")
	_cjMachineProcess.Name = field.NewString(tableName, "name")
	_cjMachineProcess.Username = field.NewString(tableName, "username")
	_cjMachineProcess.Cmdline = field.NewString(tableName, "cmdline")
	_cjMachineProcess.Workdir = field.NewString(tableName, "workdir")
	_cjMachineProcess.CPUPercent = field.NewFloat64(tableName, "cpu_percent")
	_cjMachineProcess.MemPercent = field.NewFloat32(tableName, "mem_percent")
	_cjMachineProcess.CreateAt = field.NewTime(tableName, "create_at")

	_cjMachineProcess.fillFieldMap()

	return _cjMachineProcess
}

// cjMachineProcess 进程
type cjMachineProcess struct {
	cjMachineProcessDo cjMachineProcessDo

	ALL        field.Asterisk
	ID         field.Uint32
	Pid        field.Int32
	Name       field.String
	Username   field.String
	Cmdline    field.String
	Workdir    field.String
	CPUPercent field.Float64
	MemPercent field.Float32
	CreateAt   field.Time // 记录时间

	fieldMap map[string]field.Expr
}

func (c cjMachineProcess) Table(newTableName string) *cjMachineProcess {
	c.cjMachineProcessDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cjMachineProcess) As(alias string) *cjMachineProcess {
	c.cjMachineProcessDo.DO = *(c.cjMachineProcessDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cjMachineProcess) updateTableName(table string) *cjMachineProcess {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint32(table, "id")
	c.Pid = field.NewInt32(table, "pid")
	c.Name = field.NewString(table, "name")
	c.Username = field.NewString(table, "username")
	c.Cmdline = field.NewString(table, "cmdline")
	c.Workdir = field.NewString(table, "workdir")
	c.CPUPercent = field.NewFloat64(table, "cpu_percent")
	c.MemPercent = field.NewFloat32(table, "mem_percent")
	c.CreateAt = field.NewTime(table, "create_at")

	c.fillFieldMap()

	return c
}

func (c *cjMachineProcess) WithContext(ctx context.Context) *cjMachineProcessDo {
	return c.cjMachineProcessDo.WithContext(ctx)
}

func (c cjMachineProcess) TableName() string { return c.cjMachineProcessDo.TableName() }

func (c cjMachineProcess) Alias() string { return c.cjMachineProcessDo.Alias() }

func (c cjMachineProcess) Columns(cols ...field.Expr) gen.Columns {
	return c.cjMachineProcessDo.Columns(cols...)
}

func (c *cjMachineProcess) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cjMachineProcess) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 9)
	c.fieldMap["id"] = c.ID
	c.fieldMap["pid"] = c.Pid
	c.fieldMap["name"] = c.Name
	c.fieldMap["username"] = c.Username
	c.fieldMap["cmdline"] = c.Cmdline
	c.fieldMap["workdir"] = c.Workdir
	c.fieldMap["cpu_percent"] = c.CPUPercent
	c.fieldMap["mem_percent"] = c.MemPercent
	c.fieldMap["create_at"] = c.CreateAt
}

func (c cjMachineProcess) clone(db *gorm.DB) cjMachineProcess {
	c.cjMachineProcessDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cjMachineProcess) replaceDB(db *gorm.DB) cjMachineProcess {
	c.cjMachineProcessDo.ReplaceDB(db)
	return c
}

type cjMachineProcessDo struct{ gen.DO }

func (c cjMachineProcessDo) Debug() *cjMachineProcessDo {
	return c.withDO(c.DO.Debug())
}

func (c cjMachineProcessDo) WithContext(ctx context.Context) *cjMachineProcessDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cjMachineProcessDo) ReadDB() *cjMachineProcessDo {
	return c.Clauses(dbresolver.Read)
}

func (c cjMachineProcessDo) WriteDB() *cjMachineProcessDo {
	return c.Clauses(dbresolver.Write)
}

func (c cjMachineProcessDo) Session(config *gorm.Session) *cjMachineProcessDo {
	return c.withDO(c.DO.Session(config))
}

func (c cjMachineProcessDo) Clauses(conds ...clause.Expression) *cjMachineProcessDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cjMachineProcessDo) Returning(value interface{}, columns ...string) *cjMachineProcessDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cjMachineProcessDo) Not(conds ...gen.Condition) *cjMachineProcessDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cjMachineProcessDo) Or(conds ...gen.Condition) *cjMachineProcessDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cjMachineProcessDo) Select(conds ...field.Expr) *cjMachineProcessDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cjMachineProcessDo) Where(conds ...gen.Condition) *cjMachineProcessDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cjMachineProcessDo) Order(conds ...field.Expr) *cjMachineProcessDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cjMachineProcessDo) Distinct(cols ...field.Expr) *cjMachineProcessDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cjMachineProcessDo) Omit(cols ...field.Expr) *cjMachineProcessDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cjMachineProcessDo) Join(table schema.Tabler, on ...field.Expr) *cjMachineProcessDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cjMachineProcessDo) LeftJoin(table schema.Tabler, on ...field.Expr) *cjMachineProcessDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cjMachineProcessDo) RightJoin(table schema.Tabler, on ...field.Expr) *cjMachineProcessDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cjMachineProcessDo) Group(cols ...field.Expr) *cjMachineProcessDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cjMachineProcessDo) Having(conds ...gen.Condition) *cjMachineProcessDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cjMachineProcessDo) Limit(limit int) *cjMachineProcessDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cjMachineProcessDo) Offset(offset int) *cjMachineProcessDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cjMachineProcessDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *cjMachineProcessDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cjMachineProcessDo) Unscoped() *cjMachineProcessDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cjMachineProcessDo) Create(values ...*model.CjMachineProcess) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cjMachineProcessDo) CreateInBatches(values []*model.CjMachineProcess, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cjMachineProcessDo) Save(values ...*model.CjMachineProcess) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cjMachineProcessDo) First() (*model.CjMachineProcess, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CjMachineProcess), nil
	}
}

func (c cjMachineProcessDo) Take() (*model.CjMachineProcess, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CjMachineProcess), nil
	}
}

func (c cjMachineProcessDo) Last() (*model.CjMachineProcess, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CjMachineProcess), nil
	}
}

func (c cjMachineProcessDo) Find() ([]*model.CjMachineProcess, error) {
	result, err := c.DO.Find()
	return result.([]*model.CjMachineProcess), err
}

func (c cjMachineProcessDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CjMachineProcess, err error) {
	buf := make([]*model.CjMachineProcess, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cjMachineProcessDo) FindInBatches(result *[]*model.CjMachineProcess, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cjMachineProcessDo) Attrs(attrs ...field.AssignExpr) *cjMachineProcessDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cjMachineProcessDo) Assign(attrs ...field.AssignExpr) *cjMachineProcessDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cjMachineProcessDo) Joins(fields ...field.RelationField) *cjMachineProcessDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cjMachineProcessDo) Preload(fields ...field.RelationField) *cjMachineProcessDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cjMachineProcessDo) FirstOrInit() (*model.CjMachineProcess, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CjMachineProcess), nil
	}
}

func (c cjMachineProcessDo) FirstOrCreate() (*model.CjMachineProcess, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CjMachineProcess), nil
	}
}

func (c cjMachineProcessDo) FindByPage(offset int, limit int) (result []*model.CjMachineProcess, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cjMachineProcessDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cjMachineProcessDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cjMachineProcessDo) Delete(models ...*model.CjMachineProcess) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cjMachineProcessDo) withDO(do gen.Dao) *cjMachineProcessDo {
	c.DO = *do.(*gen.DO)
	return c
}
